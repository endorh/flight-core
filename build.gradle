// Build script dependencies
buildscript {
	repositories {
		maven { url = 'https://files.minecraftforge.net/maven' }
		maven { url = 'https://repo.spongepowered.org/maven' }
		mavenCentral()
	}
	dependencies {
		classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
		classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
	}
}

// Build script plugins
plugins {
	id 'java'
	id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

//apply plugin: 'maven-publish'

// --------------------------------------------------------------------------------

// Mod info
def mod_id = "flightcore"
group = "endorh.flight_core"
version = "0.2.0"
def group_slashed = project.group.replaceAll("\\.", "/"),
	classname = "FlightCore",
	maven_artifact = "${group}:${mod_id}:${version}"

// Attributes
def display_name = "Flight Core",
	vendor = "Endor H",
	credits = "xXJiazeXx",
	authors = "Endor H",
	issue_tracker = "",
	page = "",
	update_json = "",
	logo_file = "${mod_id}.png",
	description = '''
Generates events that allow mods to alter the way a player moves and rotates
Also generates an event when the elytra item frame from an End Ship is generated,
allowing mods to replace the elytra by other item
'''

// License
def license = "LGPL"

// Dependencies
def mixin_version = "0.8.5",
	minimal_mixin_version = "0.7.10",
	mc_version = "1.19",
	forge = "41.0.38",
	forge_version = "${mc_version}-${forge}"
// Testing
def aerobatic_elytra_version = "1.16.5-0.1.0"

// Jar file name
archivesBaseName = "${mod_id}-${mc_version}"
def jar_attributes = [
	"TweakClass"                 : "org.spongepowered.asm.launch.MixinTweaker",
	"MixinConfigs"               : "mixins.${mod_id}.json",
	"FMLCorePluginContainsFMLMod": "true",
	"Specification-Title"        : "${mod_id}",
	"Specification-Vendor"       : "${vendor}",
	"Specification-Version"      : "1",
	"Implementation-Title"       : project.name,
	"Implementation-Version"     : "${version}",
	"Implementation-Vendor"      : "${vendor}",
	"Implementation-Timestamp"   : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
	"Maven-Artifact"             : "${maven_artifact}"
]

def mod_properties = [
	modid: mod_id,
	display: display_name,
	version: project.version,
	mcversion: mc_version,
	mixinver: mixin_version,
	minmixin: minimal_mixin_version,
	vendor: vendor,
	authors: authors,
	credits: credits,
	license: license,
	page: page,
	issue_tracker: issue_tracker,
	update_json: update_json,
	logo_file: logo_file,
	description: description,
	group: group,
	class_name: classname,
	group_slashed: group_slashed
]

// Java version
java.toolchain.languageVersion = JavaLanguageVersion.of(17)


// Java options
// Unicode support
compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

java {
	withSourcesJar()
}

// Minecraft options
minecraft {
	// mappings channel: 'snapshot', version: '20201028-1.16.3'
	mappings channel: 'official', version: '1.19'
	// makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

	runs {
		client {
			//noinspection GroovyAssignabilityCheck
			workingDirectory project.file('run')
			arg "-mixin.config=" + "mixins." + "${mod_id}".toString() + ".json"

			// Recommended logging data for an user-dev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			// mods {
			// 	flightcore {
			// 		//noinspection GroovyAssignabilityCheck
			// 		source sourceSets.main
			// 	}
			// }
		}

		server {
			//noinspection GroovyAssignabilityCheck
			workingDirectory project.file('run')
			arg "-mixin.config=" + "mixins." + "${mod_id}".toString() + ".json"

			// Recommended logging data for an user-dev environment
			property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
			// Recommended logging level for the console
			property 'forge.logging.console.level', 'debug'

			// mods {
			// 	flightcore {
			// 		//noinspection GroovyAssignabilityCheck
			// 		source sourceSets.main
			// 	}
			// }
		}
	}
}

repositories {
	flatDir {
		name = 'Local libs' // flightcore, colytra integration
		dirs 'libs'
	}
}

dependencies {
	minecraft "net.minecraftforge:forge:${forge_version}"

	implementation "org.spongepowered:mixin:${mixin_version}"
	annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

	// runtimeOnly name: "aerobaticelytra-${aerobatic_elytra_version}-deobf"
}

classes.dependsOn extractNatives // Make sure the natives are extracted on compile

// Jar attributes
jar {
	manifest {
		attributes(jar_attributes)
	}
}

// Reobfuscate jar
jar.finalizedBy('reobfJar')

task deobfJar(type: Jar, dependsOn: classes) {
	archiveClassifier.set("deobf")
	from sourceSets.main.output
	manifest {
		attributes(jar_attributes)
		attributes 'Maven-Artifact': "${maven_artifact}:deobf"
	}
}

artifacts {
	archives deobfJar
}

/*
// If in a multi-project build, dev time needs unobfed jar files, so obfuscation can be delayed until publishing:
//publish.dependsOn('reobfJar')

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact jar
		}
	}
	repositories {
		maven {
			url "file:///${project.projectDir}/mcmodsrepo"
		}
	}
}
*/

// Mixin refmap generation
mixin {
	add sourceSets.main, "mixins.${mod_id}.refmap.json"
	config "mixins.${mod_id}.json"

	debug.verbose = true
	debug.export = true
}

// Process resources
processResources {
	inputs.properties mod_properties
	duplicatesStrategy DuplicatesStrategy.INCLUDE

	from(sourceSets.main.resources.srcDirs) {
		filesMatching(["**/*.toml", "**/*.mcmeta"]) {
			expand mod_properties
		}
		filesMatching("**/*.json") {
			if (!getPath().contains("/lang/"))
				expand mod_properties
		}
	}
}

// Make the clean task remove the run and logs folder
clean {
	delete "run"
	delete "logs"
}

task cleanBuildAssets (type: Delete) {
	println "> Task :cleanBuildAssets"
	delete "build\\resources\\main\\assets"
}

build.dependsOn cleanBuildAssets

task cleanAll (type: Delete) {
	delete ".factorypath"
	delete "Patches"
}
cleanAll.finalizedBy clean

// Publishing
publishing {
	publications {
		mod(MavenPublication) {
			artifact jar
			artifact sourcesJar
			artifact deobfJar

			pom {
				name = display_name
				properties = [
					description: description
				]
				url = page
			}
		}
	}
	repositories {
		maven {
			name "LocalMods"
			url "${project.projectDir.parentFile.toURI()}maven"
		}
	}
	println "${project.projectDir.parentFile.toURI()}maven"
}